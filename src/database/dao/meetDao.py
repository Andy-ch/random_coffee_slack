# -*- coding: utf-8 -*-

import random

from utils import season
from database import exceptions


class MeetDao:
    def __init__(self, connector):
        self.connector = connector

    def create_random(self, uids, config):
        season_id = season.get_current()
        for_rand_distr = []

        for uid in uids:
            if self.check_exist(uid):
                continue

        # TODO
        sql_statement = ""



    def create_based_on_rating(self, uids, config):
        print("start pairs algo")

        season_id = season.get_current()

        # if user already had meetings with any other users pair will be generated by a random way.
        for_rand_distr = []

        for uid in uids:
            if self.check_exist(uid):
                continue

            sql_statement = f"SELECT AVAIL.uid " \
                            f"FROM (" \
                            f"  SELECT uid" \
                            f"  FROM users" \
                            f"  INNER JOIN" \
                            f"  (SELECT uid2 FROM rating where uid1 = '{uid}' ORDER BY value DESC) RAT" \
                            f"  ON RAT.uid2 = uid" \
                            f"  WHERE pause_in_weeks = '0'" \
                            f") AVAIL" \
                            f"  LEFT JOIN (" \
                            f"    SELECT DISTINCT user" \
                            f"    FROM (" \
                            f"      SELECT uid2 AS user" \
                            f"      FROM meets" \
                            f"      WHERE uid1 = '{uid}'" \
                            f"      UNION" \
                            f"      SELECT uid1 AS user" \
                            f"      FROM meets" \
                            f"      WHERE uid2 = '{uid}'" \
                            f"    ) RES" \
                            f"  ) BUSY ON AVAIL.uid = BUSY.user" \
                            f"  WHERE BUSY.user IS null;"

            result = self.connector.get(sql_statement)

            if result:
                self.add(uid, result[0][0], season_id)

                uids.remove(uid)
                uids.remove(result[0][0])
            else:
                for_rand_distr = []

            if len(uids) == 1:
                for_rand_distr.append(uids[0])
                break

        if for_rand_distr:
            if (len(for_rand_distr) % 2) == 1:
                for_rand_distr.append(config["bot"]["additionalUsers"][0])

            for uid in for_rand_distr:
                uid_pair = random.choice(for_rand_distr)

                self.add(uid, uid_pair, season_id)

                for_rand_distr.remove(uid)
                for_rand_distr.remove(uid_pair)

        print("end pairs algo")

        sql_statement = f"SELECT uid1, uid2 FROM meets WHERE season = '{season_id}'"

        result = self.connector.get(sql_statement)
        print(result)

        if result:
            for meet in result:
                print(meet[0])
                print(meet[1])
                print("====")

        print("end")

    def add(self, uid1, uid2, season_id="current"):
        if season_id == "current":
            season_id = season.get_current()

        sql_statement = "INSERT IGNORE INTO meets (season, uid1, uid2, completed) VALUES " \
                        f"(\'{season_id}\', " \
                        f"\'{uid1}\'," \
                        f"\'{uid2}\'," \
                        f"\'0\')"

        return self.connector.post(sql_statement)

    def get_partner_uid(self, season_id, uid):
        sql_statement = f"SELECT uid2 as uid FROM meets WHERE season = \'{season_id}\' AND uid1 = \'{uid}\' " \
                        f"UNION " \
                        f"SELECT uid1 as uid FROM meets WHERE season = \'{season_id}\' AND uid2 = \'{uid}\'"

        result = self.connector.get(sql_statement)

        if result:
            return result[0][0]
        else:
            raise exceptions.NoResultFound("")

    def get_status(self, season_id, uid):
        sql_statement = f"SELECT completed FROM meets WHERE (uid1 = \'{uid}\' OR uid2 = \'{uid}\') AND season = \'{season_id}\'"

        result = self.connector.get(sql_statement)

        if result:
            return bool(result[0][0])
        else:
            raise exceptions.NoResultFound("")

    def check_exist(self, user):
        pass
